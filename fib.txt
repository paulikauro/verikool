00011010 // lim N
00111111 // mov r0, r3
// r0 = N
00000000 // lim 0
01111111 // move r1, r3
// r1 = 0
00000010 // lim 1
10111111 // mov r2, r3
// r2 = 1
// loop (6):
11111110 // lim 255 (IO out)
01110011 // st r3, r1 or is it r1, r3
// goto end if N == 0
00000000 // lim 0
00110101 // cmp r0, r3
00101000 // lim {end}
10110111 // brl eq, r3
00000010 // lim 1
// r3 = 1
10011011 // add r2, r1
// r2 += r1
01101001 // sub r1, r2
// r1 -= r2
01111001 // sub r1, r3
// r1 -= r3 (1)
00111001 // sub r0, r3
// r0 (N) -= r3 (1)
01011101 // nand r1, r1
// r1 = ~r1
00001100 // lim {loop}
// r0 = 6, r1 = 1, r2 = 1, r3 = 6
11110111 // brl always, r3
// end (20 = 10100):
11111110 // lim {halt}
11110111 // brl always, r3
